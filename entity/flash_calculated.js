// Generated by CoffeeScript 1.9.2
(function() {
  var FlashRecordsCalculated, _, _BaseEntity, _async,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _BaseEntity = require('bijou').BaseEntity;

  _async = require('async');

  _ = require('lodash');

  FlashRecordsCalculated = (function(superClass) {
    extend(FlashRecordsCalculated, superClass);

    function FlashRecordsCalculated() {
      FlashRecordsCalculated.__super__.constructor.call(this, require('../schema/flash_calculated').schema);
    }

    FlashRecordsCalculated.prototype.addRecords = function(list, cb) {
      return this.entity().insert(list).exec(function(err, data) {
        return cb(err, data);
      });
    };

    FlashRecordsCalculated.prototype.findRecords = function(data, cb) {
      var sql;
      sql = "select pv, flash_load, cms, dispatch, ad, ad_end,video_load, play, flash_load/pv as per_flash , cms/pv as per_cms , dispatch/pv as per_dispatch , ad/pv as per_ad, ad_end/pv as per_ad_end, video_load/pv as per_video, play/pv as per_play,vv/pv as per_vv, time_start, time_type as type from flash_calculated where time_start >= " + data.time_start + " and time_start < " + data.time_end;
      sql += " and time_type='" + data.type + "' ";
      sql += " order by time_start";
      return this.execute(sql, cb);
    };

    FlashRecordsCalculated.prototype.findSumRecords = function(data, cb) {
      var sql;
      sql = "select sum(ad) as ad ,sum(ad_end) as ad_end ,sum(dispatch) as dispatch, sum(video_load) as video_load, sum(cms) as cms, sum(play) as play, sum(vv) as vv, sum(flash_load) as flash_load, sum(pv) as pv, (sum(ad))/sum(pv) as per_ad , (sum(ad_end))/sum(pv) as per_ad_end , sum(dispatch)/sum(pv) as per_dispatch , sum(video_load)/sum(pv) as per_video , sum(cms)/sum(pv) as per_cms , sum(play)/sum(pv) as per_play , sum(vv)/sum(pv) as per_vv , sum(flash_load)/sum(pv) as per_flash from flash_calculated where time_start>=" + data.time_start + " and time_start<" + data.time_end + " ";
      sql += " and time_type='" + data.type + "' ";
      sql += " order by time_start";
      return this.execute(sql, cb);
    };

    return FlashRecordsCalculated;

  })(_BaseEntity);

  module.exports = new FlashRecordsCalculated;

}).call(this);

//# sourceMappingURL=flash_calculated.js.map
